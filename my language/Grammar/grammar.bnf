
program ::= statementList
statementList ::= statement+
statement ::= varActivities ";"
            | conditional ";"
            | functionDefinition ";"
            | loop ";"
            | block
            | returnStatement ";"
            | "break" ";"

block ::= "{" statement "}"

varActivities ::= varInitialization | varDeclaration | varAssignment | unaryVarAssignment

varInitialization ::= varIdentifierList type "=" expression

varIdentifierList ::= IDENTIFIER {"," IDENTIFER} //extended bnf syntax

varDeclaration ::= IDENTIFIER type

varAssignment ::= IDENTIFER "=" expression

unaryVarAssignment ::= "++" IDENTIFIER | "--" IDENTIFIER

primary ::= NUMBER | STRING | IDENTIFIER | booleanLiteral | functionCall | collection | char

booleanLiteral ::= TRUE | FALSE

type ::= "george" //george bool
        | "interger" //intentional misspelling
        | "String"
        | "Matrix[]"
        | "char"
        | "dos"

expression ::= binaryExpression
                | unaryExpression
                | parenthesizedExpression

parenthesizedExpression ::=  "(" expression ")"

binaryExpression ::= primary binaryOperator primary
                 | parenthesizedExpression binaryOperator parenthesizedExpression
                 | parenthesizedExpression binaryOperator primary
                 | primary binaryOperator parenthesizedExpression

binaryOperator ::=  booleanOperator | comparator | simpleMathOperator

comparator ::= "==" | "=/=" | "<" | "<=" | ">=" | ">"

booleanOperator ::= "&&" | "||"

simpleMathOperator ::= "+" | "-" | "/" | "x^" | "%" | "*"

unaryExpression ::= unaryOperator primary
                | unaryOperator parenthesizedExpression

unaryOperator ::= "!" | "-"
// functions

functionCall ::= IDENTIFIER "(" callParameters?")"

callParameters ::= callParameter
                | callParameter "," callParameters
callParameter ::= IDENTIFER

functionDefinition ::= IDENTIFIER ":" "(" parameterList?")" returnType block

 parameterList ::= parameter
                | parameter "," parameterList

parameter ::= type IDENTIFER

returnType ::= type | "void"

returnStatement ::= "return" expression | functionCall

conditional ::= ifStatement ifElseStatement* elseStatement?

ifStatement ::= "if" "("expression")" block

ifElseStatement ::= "ifelse" "("expression")" block

elseStatement ::= "else" "("expression")" block

// loops
loop ::= forLoop | whileLoop
forLoop ::= "for" "(" initialization ";" expression ";" assignment ")" block
         | "foreach" "("IDENTIFIER | collection")" block

whileLoop ::= "while "( expression ) block
          | "indefinetleyPreform"  block
          | "whileThisIsBasicallyTrue" "("expression")" NUMBER "%" block

collection ::= array | linkedList | matrix

collectionActivities ::= collectionInitialization collextionDeclaration collectionAssingment

collectionInitialization ::= IDENTIFER "[]" "=" "array"

collextionDeclaration

collectionAssingment ::=

array ::= "[" expression { "," expression } "]"

linkedList ::= "<" expression { "," expression } ">"






