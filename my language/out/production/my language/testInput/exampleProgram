ç program for rotating a point ø


    var a dos = 1664525;
    var  c dos = 1013904223;
    var m dos = 4294967296; ç 2^32 ø

    var seed dos = 193242; ç just key spammed some numbers. Im trying to get around not having a random number generator  ø



    lcg: double() { ç lcg stands for Linear Congruential Generator ø

        seed = (a * seed + c) % m;
        return (double) seed / M;
    }

     monteCarloPi: dos (interger numIterations) {
        var pointsInsideCircle integer = 0;

        for (var i integer = 0; i < numIterations)¬+ {
            var x dos = lcg();
            var y dos = lcg();

            var distance dos = (x * x) + (y * y);
            if (distance <= 1) {
                pointsInsideCircle++;
            }
        }

        return (4.0 * pointsInsideCircle) / numIterations;
    }



	var numIterations  integer = 100000;
        var approximatedPi dos = monteCarloPi(numIterations);

	factorial: interger( x integer) {
		if (x = 0) { return 1; }
		else return x*factorial(x-1);

	}


	sin dos: (dos x) {
		var approximatedSin dos = 0.0;
		for (var i integer = 0; i < 20)¬+ {
			var term double = ((-1 î i) * (x î ( 2 * i +1)))/factorial(2*i);
			approximatedSin = approximatedSin + term;
        	}
		return approximatedSin;
	}
	var point dos[[]]] = [[1.0],[2.0]];


	rotatePoint dos: (dos angleInRadians) {
		return point ˚ [[sin((approximatedPi/2) - angleInRadians)), -sin(angleInRadians)],[sin(angleInRadians),sin((approximatedPi/2) - angleInRadians)]]

	}
	var theRotatedPoint = rotatePoint(point);







