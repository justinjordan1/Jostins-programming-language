
program ::= statementList
statementList ::= statement+
statement ::= varActivities ";"
            | conditional ";"
            | functionDefinition ";"
            | loop ";"
            | block
            | returnStatement ";"
            | "break" ";"
            | collectionActivities ";"

block ::= "{" statement "}"

varActivities ::= varInitialization | varDeclaration | varAssignment | unaryVarAssignment

varInitialization ::= "var" varIdentifierList type "=" expression

varIdentifierList ::= IDENTIFIER
                    | IDENTIFIER "," varIdentifierList

varDeclaration ::= IDENTIFIER type

varAssignment ::= IDENTIFER "=" expression

unaryVarAssignment ::= "++" IDENTIFIER | "--" IDENTIFIER

primary ::= NUMBER | STRING | IDENTIFIER | booleanLiteral | functionCall | collection | CHAR | parenthesizedExpression

booleanLiteral ::= TRUE | FALSE

type ::= "george" //george bool
        | "interger" //intentional misspelling
        | "String"
        | "Matrix"
        | "char"
        | "dos"

expression ::= binaryExpression
                | unaryExpression
                | parenthesizedExpression

parenthesizedExpression ::=  "(" expression ")"

binaryExpression ::= primary binaryOperator primary


binaryOperator ::=  booleanOperator | comparator | simpleMathOperator

comparator ::= "==" | "=/=" | "<" | "<=" | ">=" | ">"

booleanOperator ::= "&&" | "||"

simpleMathOperator ::= "+" | "-" | "/" | "x^" | "%" | "*"

unaryExpression ::= unaryOperator primary
                | unaryOperator parenthesizedExpression

unaryOperator ::= "!" | "-" | "i/"

functionCall ::= IDENTIFIER "(" callParameters?")"

callParameters ::= callParameter
                | callParameter "," callParameters
callParameter ::= expression

functionDefinition ::= IDENTIFIER ":" "(" parameterList?")" returnType block

 parameterList ::= parameter
                | parameter "," parameterList

parameter ::= type IDENTIFER

returnType ::= type | "void"

returnStatement ::= "return" expression | functionCall

conditional ::= ifStatement ifElseStatement* elseStatement?

ifStatement ::= "if" "("expression")" block

ifElseStatement ::= "ifelse" "("expression")" block

elseStatement ::= "else" "("expression")" block

// loops
loop ::= forLoop | whileLoop
forLoop ::= "for" "(" varInitialization conditional ")" loopIncrement block
         | "foreach" "("IDENTIFIER | collection")"loopIncrement block

loopIncrement ::= "l+" | "l-"

whileLoop ::= "while "( expression ) block
          | "indefinetleyPreform"  block
          | "whileThisIsBasicallyTrue" "("expression")" NUMBER "%" block

collection ::= array | linkedList | matrix

expressionList ::= expression
                | expression "," expressionList

collectionActivities ::= collectionInitialization collectionDeclaration collectionAssingment collectionGetters

collectionInitialization ::= IDENTIFER  type"[]" "=" array
                          | IDENTIFER type"[]" "=" "[" expressionList "]"
                          | IDENTIFIER type"<>" "=" "<" expressionList ">"
                          | IDENTIFER  type"<>" "=" linkedList
                          | IDENTIFIER type"[[]]"  "=" "[[" expressionList {"," expressionList} "]]"

collectionDeclaration ::= IDENTIFIER type"["NUMBER"]"
                        | IDENTIFIER type "<>"
                        | IDENTIFIER type"[[]]" "=" NUMBER"x"NUMBER

collectionAssingment ::= IDENTIFIER "=" array
                       | IDENTIFIER "=" linkedList
                       | IDENTIFIER "=" matrix
                       | IDENTIFIER"["NUMBER"]" "=" expression
                       | IDENTIFIER"<"NUMBER">" "=" expression
                       | IDENTIFIER"<"+">" "=" expression //add to the end of a linked list
                       | IDENTIFIER"<"0+">" "=" expression //adds to the front of a linked list
                       | IDENTIFIER"[["NUMBER "," NUMBER"]]" "=" expression

collectionGetters ::= IDENTIFIER"["NUMBER"]"
                    | IDENTIFIER"<"NUMBER">"
                    | IDENTIFIER"[["NUMBER "," NUMBER"]]"



array ::= "[" expression { "," expression } "]"

linkedList ::= "<" expression { "," expression } ">"

matrix ::= "[[" expressionList {"," expressionList} "]]"






